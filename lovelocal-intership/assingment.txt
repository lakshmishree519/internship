Easy 3:
code:
import java.util.*;

public class LastWord {
    public void length(String str){
        String nstr = str.trim();
        String splitArray[]=nstr.split(" ");
        System.out.println("The last world is \""+splitArray[splitArray.length-1]+"\" with length "+splitArray[splitArray.length-1].length());
        
    }
}

Algorithm:
step1:Removing spacing at the end and biginning of string using trim method.
step2:Creating an array of string using spit meyhod
step 3: extracting the length of the last element of arrray
 expalnation:
Storing each word of string in array and then extracting length of last element.


Medium 2:
public List<Integer> medium(int[] nums) {
	  	ArrayList<Integer> res = new ArrayList<Integer>();
        if (nums.length==0) return res;
        
        int count[] = new int[2];        
        int x[] = new int[2];       
   
        x[0] = 0; x[1] = 1;        
        for (int i = 0; i < nums.length; i++) {
        	if (x[0] == nums[i])
        		count[0]++;
        	else if (x[1] == nums[i])
        		count[1]++;
        	else if (count[0] == 0) {
        		x[0] = nums[i];
        		count[0] = 1;
        	} else if (count[1] == 0) {
        		x[1] = nums[i];
        		count[1] = 1;
        	} else {
        		count[0]--;
        		count[1]--;        		
        	}
        }
        
        Arrays.fill(count, 0);
        for (int i : nums) {// Count again for x1, x2
    	if (i == x[0]) count[0]++;
    	else if (i == x[1]) count[1]++;
    }
    for (int j = 0; j < 2; j++) {
    	if (count[j] > nums.length/3 && !res.contains(x[j])) res.add(x[j]);
    }        
    return res;
}

Algorithm:
step1:Create two arrays: count (of size 2) to track counts and x (of size 2) to hold potential majority elements. Initialize x[0] = 0 and x[1] = 1.
step2:Increment the count of x[0] or x[1] if the current element matches.
step3:If neither matches and one count is 0, update the respective x and count.
step4:If both counts are non-zero, decrement both counts
step5:Reset counts and iterate through nums again and Count occurrences of x[0] and x[1]
step6:Check if the counts of x[0] or x[1] exceed ⌊n/3⌋.If so and they're not in res, add them to res.
step7:return the res;

expalnation:
The basic idea is based on Moore's Voting Algorithm, we need two candidates with top 2 frequency. If meeting different number from the candidate, then decrease 1 from its count, or increase 1 on the opposite condition. Once count equals 0, then switch the candidate to the current number. The trick is that we need to count again for the two candidates after the first loop. Finally, output the numbers appearing more than n/3 times.


Hard 2:
code:
 public String shortestPalindrome(String s) {
          String rev_s = new StringBuilder(s).reverse().toString();
          String l = s + "#" + rev_s;
          int[] p = new int[l.length()];
      for(int i=1;i<l.length();i++){
      int j=p[i-1];
      while(j>0 && l.charAt(i)!=l.charAt(j))
       j= p[j-1];
       if(l.charAt(i)==l.charAt(j)){
         p[i] = j+1;
       }
    }
    return rev_s.substring(0,s.length()-p[l.length()-1])+s;
}
Algorithm:
step1:find the longestpalindrom s+rev_s
step2:Find suffix(rev_s) which is longest prefix(s)
step3:Remove the longest suffix from rev_s
step4:appending remaining string in rev_s [rev_s-suffix(rev_s)]+s
expalnation:
We can construct the following string and run KMP algorithm on it:
(s) + (some symbol not present in s) + (reversed string)

After running KMP on that string as result we get a array p with values of a prefix function for each character (for definition of a prefix function see KMP algorithm description). We are only interested in the last value because it shows us the largest suffix of the reversed string that matches the prefix of the original string. So basically all we left to do is to add the first k characters of the reversed string to the original string, where k is a difference between original string size and the prefix function for the last character of a constructed string.
